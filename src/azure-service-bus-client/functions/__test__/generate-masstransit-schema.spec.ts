// Generated by CodiumAI

import { HOST_MESSAGE_VALUES } from "../../consts";
import { generateMassTransitSchema } from "../generate-masstransit-schema";
import { mockconnString, mockhostMessageValues, mockmessageType, mockmessages, mockqueueOrTopic } from "./__mocks__";

describe('generateMassTransitSchema', () => {

    // Should generate a MassTransit schema with all required fields when all parameters are provided
    it('should generate a MassTransit schema with all required fields when all parameters are provided', () => {

        const result = generateMassTransitSchema({
            connString: mockconnString,
            queueOrTopic: mockqueueOrTopic,
            messages: mockmessages,
            messageType: mockmessageType,
            hostMessageValues: mockhostMessageValues,
        });

        expect(result.messageId).toBeDefined();
        expect(result.conversationId).toBeDefined();
        expect(result.sourceAddress).toBeDefined();
        expect(result.destinationAddress).toBeDefined();
        expect(result.messageType).toBeDefined();
        expect(result.message).toBeDefined();
        expect(result.sentTime).toBeDefined();
        expect(result.host).toBeDefined();
    });

    // Should generate a MassTransit schema with default host values when hostMessageValues parameter is not provided
    it('should generate a MassTransit schema with default host values when hostMessageValues parameter is not provided', () => {

        const result = generateMassTransitSchema({
            connString: mockconnString,
            queueOrTopic: mockqueueOrTopic,
            messages: mockmessages,
            messageType: mockmessageType,
        });

        expect(result.host.machineName).toBeDefined();
        expect(result.host.processName).toBe(HOST_MESSAGE_VALUES.PROCESS_NAME);
        expect(result.host.processId).toBe(HOST_MESSAGE_VALUES.PROCCESS_ID);
        expect(result.host.assembly).toBe(HOST_MESSAGE_VALUES.ASSEMBLY);
        expect(result.host.assemblyVersion).toBe(HOST_MESSAGE_VALUES.ASSEMBLY_VERSION);
        expect(result.host.frameworkVersion).toBe(HOST_MESSAGE_VALUES.FRAMEWORK_VERSION);
        expect(result.host.massTransitVersion).toBe(HOST_MESSAGE_VALUES.MASSTRANSIT_VERSION);
        expect(result.host.operatingSystemVersion).toBeDefined();
    });

    // Should generate a MassTransit schema with custom host values when hostMessageValues parameter is provided
    it('should generate a MassTransit schema with custom host values when hostMessageValues parameter is provided', () => {
        const hostMessageValues = {
            machineName: 'customMachineName',
            processName: 'customProcessName',
            processId: 456,
            assembly: 'customAssembly',
            assemblyVersion: 'customAssemblyVersion',
            frameworkVersion: 'customFrameworkVersion',
            massTransitVersion: 'customMassTransitVersion',
            operatingSystemVersion: 'customOperatingSystemVersion',
        };

        const result = generateMassTransitSchema({
            connString: mockconnString,
            queueOrTopic: mockqueueOrTopic,
            messages: mockmessages,
            messageType: mockmessageType,
            hostMessageValues,
        });

        expect(result.host.machineName).toBe(hostMessageValues.machineName);
        expect(result.host.processName).toBe(hostMessageValues.processName);
        expect(result.host.processId).toBe(hostMessageValues.processId);
        expect(result.host.assembly).toBe(hostMessageValues.assembly);
        expect(result.host.assemblyVersion).toBe(hostMessageValues.assemblyVersion);
        expect(result.host.frameworkVersion).toBe(hostMessageValues.frameworkVersion);
        expect(result.host.massTransitVersion).toBe(hostMessageValues.massTransitVersion);
        expect(result.host.operatingSystemVersion).toBe(hostMessageValues.operatingSystemVersion);
    });

    // Should throw an error when connString parameter is not provided
    it('should throw an error when connString parameter is not provided', () => {
        expect(() => {
            generateMassTransitSchema({
                queueOrTopic: mockqueueOrTopic,
                messages: mockmessages,
                messageType: mockmessageType,
            } as never);
        }).toThrowError(`Cannot read properties of undefined (reading 'split')`);
    });

    // Should throw an error when queueOrTopic parameter is not provided
    it('should not throw an error when queueOrTopic parameter is not provided', () => {
        expect(() => {
            generateMassTransitSchema({
                connString: mockconnString,
                messages: mockmessages,
                messageType: mockmessageType,
            } as never);
        }).not.toThrowError();
    });

    // Should throw an error when messages parameter is not provided
    it('should throw an error when messages parameter is not provided', () => {
        expect(() => {
            generateMassTransitSchema({
                connString: mockconnString,
                queueOrTopic: mockqueueOrTopic,
                messageType: mockmessageType,
            } as never);
        }).not.toThrowError();
    });
});
